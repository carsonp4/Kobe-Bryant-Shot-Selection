}
for (i in 1:length(players)){
for (j in 1:nrow(proj)){
proj[j,i+2] <- subset(df, `Player Name` == players[i] & `Period Name` == proj[j,1])[5]*proj[j,2]
}
}
proj <- proj %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total')))
proj[, -1] <- round(proj[, -1])
}
View(games)
View(games[["Sep29"]])
View(games[["Sep28"]])
View(games[["Sep27"]])
### Projection Function
projection <- function(`Warm Up`, Shooting, `Drill Full`, `Drill Half`, Scrimmage){
players <- unique(df$`Player Name`)
proj <- data.frame("Period Name" = c("Warm Up", "Shooting", "Drill Full", "Drill Half", "Scrimmage"),
Duration = c(`Warm Up`, Shooting, `Drill Full`, `Drill Half`, Scrimmage))
for (player in players) {
proj[, player] <- NA
}
for (i in 1:length(players)){
for (j in 1:nrow(proj)){
proj[j,i+2] <- subset(df, `Player Name` == players[i] & `Period Name` == proj[j,1])[5]*proj[j,2]
}
}
proj <- proj %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total')))
proj[, -1] <- round(proj[, -1])
return(proj)
}
# 5 Practices (15,20,30,30) + 30, 1 scrimmage (15, ..., 60)
week4 <- projection(`Warm Up` = 15*6, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30 + 60)
View(week4)
# 5 Practices (15,20,30,30) + 30, 1 scrimmage (15, ..., 60)
week5 <- projection(`Warm Up` = 15*6, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30 + 60)
# 5 Practices (15,20,30,30) + 30, 0 scrimmage (15, ..., 60)
week6 <- projection(`Warm Up` = 15*5, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30)
library(tidyverse)
library(rlist)
library(lubridate)
library(DT)
library(shiny)
# Load in and Set Up Data
raw_names <- list.files("~/Desktop/BYUB/catapult/data/week4/") # Identify file names
split_names <- str_split(raw_names, c("_"))# Split file names
better_names <- c()  # Initialize vector
for (i in 1:length(raw_names)){ # Manipulate to format "MONDD")
better_names <- append(better_names, paste0(month.abb[as.numeric(split_names[[i]][2])] , split_names[[i]][3]))
}
games <- list()
for(i in 1:length(raw_names)) { # Read in data and add to list
games <- list.append(games,
read_csv(paste0("~/Desktop/BYUB/catapult/data/week4/",
raw_names[i]), skip = 9))
}
names(games) <- better_names # Change game names in list
#Selecting variables of interest
variables <- c("Player Name", "Period Name", "Player Load Per Minute", "Total Player Load", "Total Duration")
df <- data.frame(matrix(ncol=4, nrow=0))
for (i in 1:length(games)){
dl <- games[[i]]
dl <- dl %>%
select(variables)
df <- rbind(df, dl)
}
df <- df %>%
mutate(`Period Name` = ifelse(`Period Name` == "full court", "Drill Full", `Period Name`)) %>%
mutate(`Period Name` = ifelse(`Period Name` == "warmup", "Warm Up", `Period Name`))
df <- df %>%
group_by(`Player Name`, `Period Name`) %>%
summarize(
`Total Duration` = sum(`Total Duration`),
`Total Player Load` = sum(`Total Player Load`)
) %>%
ungroup()
df$`Player Load Per Minute` <- (df$`Total Player Load`/as.integer(df$`Total Duration`))*60
### Projection Function
projection <- function(`Warm Up`, Shooting, `Drill Full`, `Drill Half`, Scrimmage){
players <- unique(df$`Player Name`)
proj <- data.frame("Period Name" = c("Warm Up", "Shooting", "Drill Full", "Drill Half", "Scrimmage"),
Duration = c(`Warm Up`, Shooting, `Drill Full`, `Drill Half`, Scrimmage))
for (player in players) {
proj[, player] <- NA
}
for (i in 1:length(players)){
for (j in 1:nrow(proj)){
proj[j,i+2] <- subset(df, `Player Name` == players[i] & `Period Name` == proj[j,1])[5]*proj[j,2]
}
}
proj <- proj %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total')))
proj[, -1] <- round(proj[, -1])
return(proj)
}
# 5 Practices (15,20,30,30) + 30, 1 scrimmage (15, ..., 60)
week5 <- projection(`Warm Up` = 15*6, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30 + 60)
# 5 Practices (15,20,30,30) + 30, 1 scrimmage (15, ..., 60)
week6 <- projection(`Warm Up` = 15*6, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30 + 60)
# 5 Practices (15,20,30,30) + 30, 0 scrimmage (15, ..., 60)
week7 <- projection(`Warm Up` = 15*5, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30)
View(week5)
week5$week <- "Week 5"
week6$week <- "Week 6"
week7$week <- "Week 7"
combined_df <- bind_rows(week5, week6, week7)
View(combined_df)
combined_df %>%
filter(Period.Name == "Total")
combined_df <- bind_rows(week5, week6, week7)%>%
filter(Period.Name == "Total")
combined_df <- bind_rows(week5, week6, week7)%>%
filter(Period.Name == "Total") %>%
select(18, 3:17)
combined_df
combined_df
data_long <- data %>%
pivot_longer(cols = -Week, names_to = "Player", values_to = "Value")
data_long <- combined_df %>%
pivot_longer(cols = -Week, names_to = "Player", values_to = "Value")
data_long <- combined_df %>%
pivot_longer(cols = -week, names_to = "Player", values_to = "Value")
View(data_long)
View(df)
13109/60
View(week5)
combined_df <- bind_rows(week5, week6, week7)%>%
filter(Period.Name == "Total") %>%
select(18, 3:17) %>%
pivot_longer(cols = -week, names_to = "Player", values_to = "Value")
ggplot(combined_df, aes(x = Player, y = Value, fill = week)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Player Performance Over Weeks",
x = "Player",
y = "Value") +
theme_minimal()
ggplot(combined_df, aes(x = Player, y = Value, fill = week)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Player Performance Over Weeks",
x = "Player",
y = "Value") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(combined_df, aes(x = Player, y = Value, fill = week)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Player Load Projection",
x = "Player",
y = "Total Player Load") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(combined_df, aes(x = Player, y = Value, fill = week)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Player Load History and Projection",
x = "Player",
y = "Total Player Load") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(week5)
105/15
# Adding in week 4
week4 <- df %>%
filter(`Period Name` != "Session")
# Adding in week 4
week4 <- df %>%
filter(`Period Name` != "Session") %>%
filter(`Period Name` != "Weight Room")
View(week4)
# Adding in week 4
week4 <- df %>%
filter(`Period Name` != "Session") %>%
filter(`Period Name` != "Weight Room") %>%
select(2,1,4)
# Adding in week 4
week4 <- df %>%
filter(`Period Name` != "Session") %>%
filter(`Period Name` != "Weight Room") %>%
select(2,1,4) %>%
group_by(`Player Name`) %>%
summarize(
`week` = "Week 4",
`Value` = sum(`Total Player Load`)
)
# Adding in week 4
week4 <- df %>%
filter(`Period Name` != "Session") %>%
filter(`Period Name` != "Weight Room") %>%
select(2,1,4) %>%
group_by(`Player Name`) %>%
summarize(
`week` = "Week 4",
`Value` = sum(`Total Player Load`)
) %>%
select(2,1,3)
colnames(week4)[2]
colnames(week4)[2] <- "Player"
library(tidyverse)
library(rlist)
library(lubridate)
library(DT)
library(shiny)
# Load in and Set Up Data
raw_names <- list.files("~/Desktop/BYUB/catapult/data/week4/") # Identify file names
split_names <- str_split(raw_names, c("_"))# Split file names
better_names <- c()  # Initialize vector
for (i in 1:length(raw_names)){ # Manipulate to format "MONDD")
better_names <- append(better_names, paste0(month.abb[as.numeric(split_names[[i]][2])] , split_names[[i]][3]))
}
games <- list()
for(i in 1:length(raw_names)) { # Read in data and add to list
games <- list.append(games,
read_csv(paste0("~/Desktop/BYUB/catapult/data/week4/",
raw_names[i]), skip = 9))
}
names(games) <- better_names # Change game names in list
#Selecting variables of interest
variables <- c("Player Name", "Period Name", "Player Load Per Minute", "Total Player Load", "Total Duration")
df <- data.frame(matrix(ncol=4, nrow=0))
for (i in 1:length(games)){
dl <- games[[i]]
dl <- dl %>%
select(variables)
df <- rbind(df, dl)
}
df <- df %>%
mutate(`Period Name` = ifelse(`Period Name` == "full court", "Drill Full", `Period Name`)) %>%
mutate(`Period Name` = ifelse(`Period Name` == "warmup", "Warm Up", `Period Name`))
df <- df %>%
group_by(`Player Name`, `Period Name`) %>%
summarize(
`Total Duration` = sum(`Total Duration`),
`Total Player Load` = sum(`Total Player Load`)
) %>%
ungroup()
df$`Player Load Per Minute` <- (df$`Total Player Load`/as.integer(df$`Total Duration`))*60
### Projection Function
projection <- function(`Warm Up`, Shooting, `Drill Full`, `Drill Half`, Scrimmage){
players <- unique(df$`Player Name`)
proj <- data.frame("Period Name" = c("Warm Up", "Shooting", "Drill Full", "Drill Half", "Scrimmage"),
Duration = c(`Warm Up`, Shooting, `Drill Full`, `Drill Half`, Scrimmage))
for (player in players) {
proj[, player] <- NA
}
for (i in 1:length(players)){
for (j in 1:nrow(proj)){
proj[j,i+2] <- subset(df, `Player Name` == players[i] & `Period Name` == proj[j,1])[5]*proj[j,2]
}
}
proj <- proj %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total')))
proj[, -1] <- round(proj[, -1])
return(proj)
}
# 5 Practices (15,20,30,30) + 30, 1 scrimmage (15, ..., 60)
week5 <- projection(`Warm Up` = 15*6, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30 + 60)
# 5 Practices (15,20,30,30) + 30, 1 scrimmage (15, ..., 60)
week6 <- projection(`Warm Up` = 15*6, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30 + 60)
# 5 Practices (15,20,30,30) + 30, 0 scrimmage (15, ..., 60)
week7 <- projection(`Warm Up` = 15*5, Shooting = 20*5, `Drill Full` = 30*5,`Drill Half` = 30*5, Scrimmage = 30)
# Adding in week 4
week4 <- df %>%
filter(`Period Name` != "Session") %>%
filter(`Period Name` != "Weight Room") %>%
select(2,1,4) %>%
group_by(`Player Name`) %>%
summarize(
`week` = "Week 4",
`Value` = sum(`Total Player Load`)
) %>%
select(2,1,3)
colnames(week4)[2] <- "Player"
week5$week <- "Week 5"
week6$week <- "Week 6"
week7$week <- "Week 7"
combined_df <- bind_rows(week4,week5, week6, week7)%>%
filter(Period.Name == "Total") %>%
select(18, 3:17) %>%
pivot_longer(cols = -week, names_to = "Player", values_to = "Value")
combined_df <- bind_rows(week5, week6, week7)%>%
filter(Period.Name == "Total") %>%
select(18, 3:17) %>%
pivot_longer(cols = -week, names_to = "Player", values_to = "Value")
View(combined_df)
cbind(week4, combined_df)
rbind(week4, combined_df)
combined_df <- rbind(week4, combined_df)
ggplot(combined_df, aes(x = Player, y = Value, fill = week)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Player Load History and Projection",
x = "Player",
y = "Total Player Load") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(week4)
View(df)
13109/60
13109/60/7
9602/60/7
4732/60/7
7145/60/7
3775/60/7
devtools::install_github("lbenz730/ncaahoopR")
get_pbp("BYU", 2022)
library(ncaahoopR)
# Loading Packages
library(tidyverse)
library(tidymodels)
library(vroom)
library(poissonreg)
library(rpart)
library(ranger)
library(stacks)
library(embed)
library(discrim)
library(naivebayes)
library(kknn)
library(kernlab)
library(themis)
# Reading in Data
setwd("~/Desktop/Stat348/Kobe-Bryant-Shot-Selection/")
data <- vroom("data.csv")
# Feature Engenieering ----------------------------------------------------
# action_type
data$action_type <- as.factor(data$action_type)
# combined_shot_type
data$combined_shot_type <- as.factor(data$combined_shot_type)
# game_event_id, game_id
data <- data %>% select(-c(game_event_id, game_id)) # not useful
# lat, loc_x, loc_y, lon
# Shot map is semi-circle so convert to polar coordinates
data$loc_r <- sqrt((data$loc_x)^2 + (data$loc_y)^2)
data$loc_theta <- atan(data$loc_y/data$loc_x)
data$loc_theta[is.na(data$loc_theta)] <- pi/2 # Remove NA's with 90 degrees
data <- data %>% select(-c(loc_x,loc_y,lat,lon))
# minutes_remaining, seconds_remaining
# Combine these two variables because useless otherwise
data$time_remaining <- (data$minutes_remaining * 60) + data$seconds_remaining
data <- data %>% select(-c(minutes_remaining, seconds_remaining))
# season
# Make season a factor
data$season <- as.factor(data$season)
# shot_type, shot_zone_area, shot_zone_basic, shot_zone_range
data$shot_type <- as.factor(data$shot_type)
data$shot_zone_area <- as.factor(data$shot_zone_area)
data$shot_zone_basic <- as.factor(data$shot_zone_basic)
data$shot_zone_range <- as.factor(data$shot_zone_range)
# team_id, team_name
# Only ever played for Lakers
unique(data$team_id)
unique(data$team_name)
# Loading Packages
library(tidyverse)
library(tidymodels)
library(vroom)
library(poissonreg)
library(rpart)
library(ranger)
library(stacks)
library(embed)
library(discrim)
library(naivebayes)
library(kknn)
library(kernlab)
library(themis)
# Reading in Data
setwd("~/Desktop/Stat348/Kobe-Bryant-Shot-Selection/")
data <- vroom("data.csv")
ggplot(data, aes(x = lon, y = lat)) + geom_point()
# Feature Engenieering ----------------------------------------------------
# action_type
data$action_type <- as.factor(data$action_type)
# combined_shot_type
data$combined_shot_type <- as.factor(data$combined_shot_type)
# game_event_id, game_id
data <- data %>% select(-c(game_event_id, game_id)) # not useful
# lat, loc_x, loc_y, lon
# Shot map is semi-circle so convert to polar coordinates
data$loc_r <- sqrt((data$loc_x)^2 + (data$loc_y)^2)
data$loc_theta <- atan(data$loc_y/data$loc_x)
data$loc_theta[is.na(data$loc_theta)] <- pi/2 # Remove NA's with 90 degrees
data <- data %>% select(-c(loc_x,loc_y,lat,lon))
# minutes_remaining, seconds_remaining
# Combine these two variables because useless otherwise
data$time_remaining <- (data$minutes_remaining * 60) + data$seconds_remaining
data <- data %>% select(-c(minutes_remaining, seconds_remaining))
# season
# Make season a factor
data$season <- as.factor(data$season)
# shot_type, shot_zone_area, shot_zone_basic, shot_zone_range
data$shot_type <- as.factor(data$shot_type)
data$shot_zone_area <- as.factor(data$shot_zone_area)
data$shot_zone_basic <- as.factor(data$shot_zone_basic)
data$shot_zone_range <- as.factor(data$shot_zone_range)
# team_id, team_name
# Only ever played for Lakers
unique(data$team_id)
unique(data$team_name)
data <- data %>% select(-c(team_id, team_name))
# game_date
# Instead gong to make game number
data$game_num <- as.numeric(as.factor(data$game_date))
# Not going to do time series
data <- data %>% select(-game_date)
# matchup
# Will be redundant with home/away and opponent
data$home <- as.numeric(grepl("vs.", data$matchup, fixed = TRUE))
data$away <- as.numeric(grepl("@", data$matchup, fixed = TRUE))
data <- data %>% select(-matchup)
# opponent
data$opponent <- as.factor(data$opponent)
# NEW: Shot in last 3 minutes of period
data$lastminutes <- ifelse(data$time_remaining <= 180, 1, 0)
###### I copied this from someone else I found online about acheivements
data$first_team <- ifelse((data$game_num >= 395 & data$game_num <= 474) |
(data$game_num >= 494 & data$game_num <= 575) |
(data$game_num >= 588 & data$game_num <= 651) |
(data$game_num >= 740 & data$game_num <= 819) |
(data$game_num >= 827 & data$game_num <= 903) |
(data$game_num >= 909 & data$game_num <= 990) |
(data$game_num >= 1012 & data$game_num <= 1093) |
(data$game_num >= 1117 & data$game_num <= 1189) |
(data$game_num >= 1213 & data$game_num <= 1294) |
(data$game_num >= 1305 & data$game_num <= 1362) |
(data$game_num >= 1375 & data$game_num <= 1452),
1, 0)
data$scoring_leader <- ifelse((data$game_num >= 740 & data$game_num <= 819) |
(data$game_num >= 827 & data$game_num <= 903),
1, 0)
data$mvp <- ifelse(data$game_num >= 909 & data$game_num <= 990, 1, 0)
data$finals_mvp <- ifelse((data$game_num >= 1112 & data$game_num <= 1116) |
(data$game_num >= 1206 & data$game_num <= 1212),
1, 0)
data$num_rings <- 0
data[data$game_num >= 311 & data$game_num <= 394,]$num_rings <- 1
data[data$game_num >= 395 & data$game_num <= 493,]$num_rings <- 2
data[data$game_num >= 494 & data$game_num <= 1116,]$num_rings <- 3
data[data$game_num >= 1117 & data$game_num <= 1212,]$num_rings <- 4
data[data$game_num >= 1213 & data$game_num <= 1559,]$num_rings <- 5
data$postachilles <- ifelse(data$game_num > 1452, 1, 0)
train<- subset(data, !is.na(shot_made_flag))
train$shot_made_flag <- as.factor(train$shot_made_flag)
test <- subset(data, is.na(shot_made_flag)) %>%
select(-shot_made_flag)
my_recipe <- recipe(shot_made_flag ~ ., data = train) %>%
update_role(shot_id, new_role = "ID") %>%
step_lencode_bayes(all_nominal_predictors(), outcome = vars(shot_made_flag))
bake(prep(my_recipe), new_data = train) %>% view()
split <- initial_split(train, prop = 0.8)
train_data <- training(split)
valid_data <- testing(split)
rf_model <- rand_forest(mtry = 10, min_n = 5, trees = 500) %>%
set_engine("ranger") %>%
set_mode("classification")
gb_model <- boost_tree(mtry = 5, trees = 500, min_n = 10, tree_depth = 5) %>%
set_engine("xgboost") %>%
set_mode("classification")
svm_model <- svm_poly(degree = 3, cost = 1) %>%
set_engine("kernlab") %>%
set_mode("classification")
bart_model <- bart(mode = "classification", trees = 200, k = 2)
naive_bayes_model <- naive_bayes()
knn_model <- nearest_neighbor(weight_func = "rectangular", neighbors = 5) %>%
set_engine("kknn") %>%
set_mode("classification")
# Create a workflow for each model
rf_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(rf_model)
gb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(gb_model)
svm_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(svm_model)
bart_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(bart_model)
nb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(naive_bayes_model)
knn_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(knn_model)
# Combine models into a list
models <- list(rf = rf_wf, gb = gb_wf, svm = svm_wf, bart = bart_wf, nb = nb_wf, knn = knn_wf)
# Use stacking to combine predictions
stack_model <- stack(models) %>%
blend_preds()
# Train the stacked model
stack_final_wf <- stack_model %>%
fit(data = train_data)
# Make predictions on the validation set
stack_preds <- predict(stack_final_wf, new_data = valid_data, type = "prob")
# Calculate log loss on the validation set
log_loss <- log_loss(valid_data$shot_made_flag, stack_preds$.pred_1)
print(paste("Log Loss on Validation Set: ", log_loss))
# Make predictions on the test set
test_preds <- predict(stack_final_wf, new_data = test, type = "prob")
# Create submission file
stack_submit <- as.data.frame(cbind(test$shot_id, test_preds$.pred_1))
colnames(stack_submit) <- c("shot_id", "shot_made_flag")
write_csv(stack_submit, "stacked_submit.csv")
stack_submit
# Combine models into a list
models <- list(rf = rf_wf, gb = gb_wf, svm = svm_wf, bart = bart_wf, nb = nb_wf, knn = knn_wf)
# Use stacking to combine predictions
stack_model <- stack(models) %>%
blend_preds()
